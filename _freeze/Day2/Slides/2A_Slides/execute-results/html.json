{
  "hash": "0c5cfa20c41eefd804da6851f2c521a8",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Intro R4SS Day 2A\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-06-02\"\n---\n\n\n\n::: {.my-title}\n# [Introduction to R]{.blue2} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 2A | 2023-06-02]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../../img/proud_coder_2780E3.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n<!-- Factors -->\n\n# Factors\n\n## Factors {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Factors]{.b .blue} are used to represent categorical data\n    -   Factors have multiple possible [levels]{.b .blue}\n    -   Levels are [discrete]{.b .green} and mutually-exclusive\n\n::: {.fragment .mt1}\n-   Sometimes levels are numeric \"codes\"\n    -   e.g., 1=Drama, 2=Action, 3=Comedy\n    -   R needs to know these aren't numbers!\n    -   We can even give each level a descriptive [label]{.b .green}\n    -   Or we can just store the levels as strings\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li cdbgwqyw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n\n## Factors Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Ask 10 kids to order 1: nuggets, 2: pizza, or 3: salad\n\nfood <- c(2, 2, 1, 2, 1, 2, 1, 1, 2, 2)\nfood\n\n# ==============================================================================\n\n# LESSON: We can turn this into a factor with the factor() function\n\nfood2 <- factor(food)\nfood\n\n# ==============================================================================\n\n# USECASE: We can quickly and easily count each level with table()\n\ntable(food2)\n\n# ==============================================================================\n\n# LESSON: We can let R know that level=3 is also possible by specifying levels\n\nfood3 <- factor(food, levels = c(1, 2, 3))\nfood3\n\ntable(food3)\n\n# ==============================================================================\n\n# LESSON: We can also give a label to each level so it is more readable\n\nfood4 <- factor(food, levels = c(1, 2, 3), \n                labels = c(\"nuggets\", \"pizza\", \"salad\"))\nfood4\n\ntable(food4)\n\n# ==============================================================================\n\n# PITFALL: Don't confuse levels and labels\n\nfood5 <- factor(food, levels = c(\"nuggets\", \"pizza\", \"salad\"),\n                labels = c(1, 2, 3))\nfood5 # full of <NA> because it can't find these levels\n\n# ==============================================================================\n\n# USECASE: You can also just store the levels as strings (like self-labels)\n\ngenre <- c(\"pop\", \"metal\", \"pop\", \"rock\", \"rap\", \"rap\", \"pop\", \"rock\")\ngenre\n\ngenre2 <- factor(genre) # observed levels will be assigned alphabetically\ngenre2\n\ntable(genre2)\n\n# ==============================================================================\n\n# USECASE: Working with factors in a tibble\n\nlibrary(tidyverse)\ncereal <- read_csv(\"cereal.csv\")\ncereal\n\ncereal$mfr <- factor(cereal$mfr)\ncereal$type <- factor(cereal$type)\n\ntable(cereal2$mfr)\n\ntable(cereal2$type)\n```\n:::\n\n\n\n<!-- Missing Values -->\n\n# Missing Values\n\n## Missing Values {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Sometimes your data will have [missing values]{.b .blue}\n    -   Perhaps these were [never collected]{.b .green}\n    -   Perhaps the values were [lost/corrupted]{.b .green}\n    -   Perhaps the participant [didn't respond]{.b .green}\n\n::: {.fragment .mt1}\n-   We need to tell R which values are missing\n    -   To do so, we set those values to `NA`\n    -   Functions from **tidyverse** make this easy\n:::\n\n::: {.fragment .mt1}\n-   Missingness is often [\"contagious\"]{.b .green} in R<br />\n    e.g., a vector with `NA` has an unknown mean\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li rwotyanb trigger=loop delay=3000 speed=0.5 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Missing Values Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse for the read function\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# PITFALL: Number codes for missingness will mess up calculations in R\n\nheights <- c(149, 158, -999) # here we use -999 to represent a missing value\n\nrange(heights)\n\nmean(heights)\n\nlog(heights) # our missing value is no longer -999\n\n# ==============================================================================\n\n# USECASE: Use NA for missingness instead\n\nheights2 <- c(149, 158, NA)\nheights2\n\nlog(heights2) # the NA stayed an NA (due to contagiousness)\n\n# ==============================================================================\n\n# LESSON: Use na.rm = TRUE to do a summary function ignoring the NAs\n\nmean(heights2) # the mean is an NA (due to contagiousness)\n\nmean(heights2, na.rm = TRUE)\n\nrange(heights2, na.rm = TRUE)\n\n# ==============================================================================\n\n# USECASE: Dealing with missing values in tibbles\n\ncereal <- read_csv(\"cereal.csv\")\n\ncereal$rating\n\nrange(cereal$rating)\n\n# ==============================================================================\n\n# LESSON: Use na_if() to convert specific values to NA while mutating\n\ncereal2$rating <- na_if(cereal2$rating, -999)\n\ncereal2$rating\n\nrange(cereal2$rating, na.rm = TRUE)\n\n# ==============================================================================\n\n# LESSON: Use read_csv(na) to convert specific values to NA while reading\n\ncereal3 <- read_csv(\"cereal.csv\", na = \"-999\")\n\ncereal3$rating\n\nrange(cereal3$rating, na.rm = TRUE)\n```\n:::\n\n\n\n<!-- Data Summary -->\n\n# Data Summary\n\n## Data Verification {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   It's always a good idea to start with [verification]{.b .blue}\n\n::: {.fragment .mt1}\n-   Check that your variables are the [correct type]{.b .green}\n    -   Configure your [factors]{.b .green}' levels and labels\n    -   Establish ordinal factors' ordering\n    -   Explicitly set your [missing values]{.b .green} to NA\n:::\n\n::: {.fragment .mt1}\n-   Check variables' [extrema]{.b .green} and [distributions]{.b .green}\n    -   Check for erroneous and outlying values\n    -   Check the shape of continuous distributions\n    -   Check the overlap of categorical levels\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li zqwicaxf trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Data Verification Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will use the tidyverse and easystats packages\n\nlibrary(tidyverse)\nlibrary(easystats)\n\n# ==============================================================================\n\n# SETUP: We will use the salaries data and configure its factors\n\nsalaries <- read_csv(\"salaries.csv\")\nsalaries\n\nsalaries$rank <- factor(salaries$rank, levels = c(1, 2, 3), \n                        labels = c(\"Assistant\", \"Associate\", \"Full\"))\n\nsalaries$discipline <- factor(salaries$discipline, levels = c(1, 2), \n                              labels = c(\"Applied\", \"Theoretical\"))\n\nsalaries$sex <- factor(salaries$sex, levels = c(1, 2), \n                       labels = c(\"Female\", \"Male\"))\n\nsalaries\nwrite_csv(salaries, \"salaries2.csv\")\n\n# ==============================================================================\n\n# LESSON: Then check the summary statistics for problems\n\nsummary(salaries)\n\n# ==============================================================================\n\n# LESSON: Describe the distribution of continuous variables\n\ndescribe_distribution(salaries)\n\n# ==============================================================================\n\n# LESSON: Describe the distributions of discrete variables / factors\n\ndata_tabulate(salaries, select = is.factor)\n```\n:::\n\n\n\n## Exploratory Data Analysis {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Variable distributions]{.b .blue} are critical in data analysis\n    -   What are the most and least [common values]{.b .green}?\n    -   What are the [extrema]{.b .green} (min and max values)?\n    -   Are there any [outliers]{.b .green} or impossible values?\n    -   How much [spread]{.b .green} is there in the variable?\n    -   What [shape]{.b .green} does the distribution take?\n\n::: {.fragment .mt1}\n-   Distributions describe a single variable's [variation]{.b .green}\n    -   We can also visualize multiple variables' [covariation]{.b .blue}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li wovwohsm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Exploratory Data Analysis Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# PREP: We will need the tidyverse package and some example data\n\nlibrary(tidyverse)\n\nsalaries <- read_csv(\"salaries2.csv\")\n\n# ==============================================================================\n\n# USECASE: Visualize the variation of a discrete variable / factor\n\nqplot(x = rank, data = salaries, geom = \"bar\")\n\nqplot(x = discipline, data = salaries, geom = \"bar\")\n\n# ==============================================================================\n\n# USECASE: Visualize the variation of a continuous variable\n\nqplot(x = yrs.since.phd, data = salaries, geom = \"histogram\")\n\nqplot(x = yrs.since.phd, data = salaries, geom = \"boxplot\")\n\nqplot(x = salary, data = salaries, geom = \"histogram\")\n\nqplot(x = salary, data = salaries, geom = \"boxplot\")\n\n# ==============================================================================\n\n# USECASE: Visualize the covariation of two continuous variables\n\nqplot(x = yrs.since.phd, y = salary, data = salaries, geom = \"point\")\n\n# ==============================================================================\n\n# USECASE: Visualize the covariation of two discrete variables\n\nqplot(x = rank, y = discipline, data = salaries, geom = \"jitter\")\n\nqplot(x = rank, fill = discipline, data = salaries, geom = \"bar\")\n\n# ==============================================================================\n\n# USECASE: Visualize the covariation of a discrete and a continuous variable\n\nqplot(x = salary, y = rank, data = salaries, geom = \"boxplot\")\n\nqplot(x = salary, y = rank, data = salaries, geom = \"violin\")\n```\n:::\n\n\n\n<!-- Correlations -->\n\n# Correlations\n\n## Correlations {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Correlations]{.b .blue} $(r)$ quantify the strength of the [linear relationship]{.b .green} between two variables from $-1$ to $+1$\n    -   [$r\\rightarrow-1$:]{.fixwidth} as $x$ increases, $y$ decreases\n    -   [$r\\rightarrow0$:]{.fixwidth} as $x$ increases, $y$ doesn't change\n    -   [$r\\rightarrow+1$:]{.fixwidth} as $x$ increases, $y$ also increases\n\n::: {.fragment .mt1}\n-   Correlations may be the focus of statistical inference or just useful descriptive summaries\n:::\n\n::: {.fragment .mt1}\n-   We can easily estimate many [different types]{.b .green} of correlation coefficients in R\n    -   We will use the [easystats](https://easystats.github.io/easystats/) package to accomplish this\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li nbdmfygb trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Correlations Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(easystats)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# LESSON: The standard correlation test in R\n\ncor.test(salaries$salary, salaries$yrs.since.phd)\n\n# ==============================================================================\n\n# TIP: Fancier correlations with the {easystats} package\n\nresults <- correlation(salaries)\nresults\n\n# ==============================================================================\n\n# LESSON: Creating and plotting the correlation matrix\n\nsummary(results)\n\nplot(summary(results))\n\n# ==============================================================================\n\n# p-value adjustments\n\ncorrelation(salaries, p_adjust = \"none\") # very liberal\n\ncorrelation(salaries, p_adjust = \"bonferroni\") # very conservative\n\ncorrelation(salaries, p_adjust = \"holm\") # recommended\n\n# ==============================================================================\n\n# LESSON: Other correlation methods\n\ncorrelation(salaries, method = \"spearman\") # ranks (easier interpretation)\n\ncorrelation(salaries, method = \"kendall\") # ranks (more robust and efficient)\n\ncorrelation(salaries, method = \"distance\") # linear and nonlinear relationships\n```\n:::\n\n\n\n<!-- Comparing Groups -->\n\n# Comparing Groups\n\n## Comparing Two Groups {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   A fundamental task in science is comparing the [centrality]{.b .green} of two groups' distributions\n    -   Effect Sizes: Cohen's d or Rank Biserial\n\n::: {.fragment .mt1}\n-   [Independent]{.b .blue} groups are [separate]{.b .green}\n    -   Comparisons are [between]{.b .green} subjects\n    -   *Did students in New York or students in California spend more time on social media?*\n:::\n\n::: {.fragment .mt1}\n-   [Dependent]{.b .blue} groups are [paired]{.b .green}\n    -   Comparisons are [within]{.b .green} subjects\n    -   *Did the students in my class spend more time on social media during the winter or the summer?*\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li wfkxiwtw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Comparing Two Groups Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(tidyverse)\nlibrary(easystats)\n\n\n## Independent Groups Example\n\nsalaries <- read_csv(\"salaries.csv\")\nsalaries\n\n### Exploratory Analysis\n\nqplot(x = salary, y = discipline, data = salaries, geom = \"boxplot\")\n\n### Parametric Test: Welch's Two Sample t-test\n\nresults <- t.test(\n  formula = salary ~ discipline,\n  data = salaries\n)\nmodel_parameters(results, effectsize_type = \"d\")\n\n### Non-parametric Alternative: Wilcoxon rank sum test\n### Functions: wilcox.test() and rank_biserial()\n\n\n## Dependent Groups Example\n\ninterpersonal <- read_csv(\"interpersonal.csv\")\ninterpersonal\n\n### Exploratory Analysis\n\nqplot(x = change_iip, data = interpersonal, geom = \"histogram\")\n\n### Parametric Test: Paired t-test\n\nresults3 <- t.test(\n  formula = Pair(post_iip, pre_iip) ~ 1,\n  data = interpersonal\n)\nmodel_parameters(results3, effectsize_type = \"d\")\n\n### Non-parametric Alternative: Wilcoxon signed rank exact test\n### Functions: wilcox.test() and rank_biserial()\n```\n:::\n\n\n\n\n## Comparing Many Groups {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We may also compare [more than two]{.b .green} groups\n    -   Independent vs. dependent still applies\n\n::: {.fragment .mt1}\n-   An [omnibus test]{.b .blue} asks *whether* groups are different\n    -   If significant, one or more group is different\n    -   Effect Sizes: $\\eta^2$ or $\\varepsilon^2$\n:::\n\n::: {.fragment .mt1}\n-   [Posthoc tests]{.b .blue} ask *how* groups are different\n    -   Pairwise tests compare each pair of groups\n    -   They are often \"gated\" behind omnibus tests\n    -   With many groups, *p*-values are adjusted\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li dugfwxlj trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Comparing Many Groups Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## SETUP\n\nlibrary(tidyverse)\nlibrary(easystats)\n\n\n## Independent Groups Example\n\nsalaries <- read_csv(\"salaries2.csv\")\nsalaries\n\n### Exploratory Analysis\n\nqplot(x = salary, y = rank, data = salaries, geom = \"boxplot\")\n\n### Parametric Test: One-Way Analysis of Variance\n\nomnibus <- aov(\n  formula = salary ~ rank,\n  data = salaries\n)\nmodel_parameters(omnibus, effectsize_type = \"eta\")\n\n\nem <- estimate_means(omnibus, at = \"rank\")\nem\nplot(em)\n\nestimate_contrasts(omnibus, contrast = \"rank\")\n\n\n### Nonparametric Alternative: Kruskal-Wallis Rank Sum Test\n### Functions: kruskal.test() and rank_epsilon_squared()\n### Posthoc: Pairwise Wilcoxon Rank Sum Tests\n### Functions: pairwise.wilcox.test()\n\n\n## Dependent Groups Example\n\nelicit <- read_csv(\"elicitation.csv\")\n\n### Exploratory Analysis\n\nqplot(x = Task, y = Amused, data = elicit, geom = \"boxplot\")\n\n### Parametric Test: Oneway Repeated Measures ANOVA\n\nomnibus2 <- aov(\n  formula = Amused ~ Task + Error(Subject),\n  data = elicit\n)\nmodel_parameters(omnibus2, effectsize_type = \"eta\")\n\nestimate_means(omnibus2, at = \"Task\")\nestimate_contrasts(omnibus2, contrast = \"Task\")\n\n### Nonparametric Alternative: Friedman Rank Sum Test\n### Functions: friedman.test() and kendalls_w()\n### Posthoc: Nemenyi-Wilcoxon-Wilcox All-Pairs Test\n### Functions: PMCMRplus::frdAllPairsNemenyiTest()\n```\n:::\n",
    "supporting": [
      "2A_Slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}