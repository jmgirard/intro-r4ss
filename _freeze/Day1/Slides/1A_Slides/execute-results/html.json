{
  "hash": "9db09a37ca02435adcf31c8090cb39e9",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Intro R4SS Day 1A\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-06-01\"\n---\n\n\n::: {.my-title}\n# [Introduction to R]{.blue2} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 1A | 2023-06-01]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../../img/proud_coder_2780E3.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Instructor {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"30%\"}\n::: {.tc}\n![](../../img/Girard_500x500.jpg){.br-100}\n\n**Jeffrey Girard**, PhD<br /> [affcom.ku.edu/girard](https://affcom.ku.edu/girard)<br /> [jmgirard\\@ku.edu](mailto:jmgirard@ku.edu)\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"60%\"}\n::: {.fragment}\n#### Background\n\n-   [Assistant Professor]{.b .green}, *University of Kansas*\n-   Research Postdoc, *Carnegie Mellon University*\n-   PhD Student, *University of Pittsburgh*\n:::\n::: {.fragment .mt1}\n#### Research Areas\n\n-   Psychological Assessment\n-   Affective/Interpersonal Communication\n-   Applied [Statistics]{.b .green} and Machine Learning\n-   [Data Science]{.b .green} and Software Engineering\n:::\n:::\n:::\n\n## R Rationale {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n1.  Think of your [computer]{.b .blue} as the [engine]{.b .green} of a car\n    -   It provides raw power for computation\n\n::: {.fragment .mt1}\n2.  The [R language]{.b .blue} is like the [controls]{.b .green} for the car\n    -   It lets you apply and direct that power\n:::\n\n::: {.fragment .mt1}\n3.  [RStudio]{.b .blue} is like a fancy [dashboard]{.b .green} for the car\n    -   It adds extra information and convenience\n:::\n\n::: {.fragment .mt1}\n4.  An [R package]{.b .blue} is like an [add-on]{.b .green} for the car\n    -   It adds new features and capabilities\n:::\n:::\n\n::: {.column .tc .pv5 .relative width=\"40%\"}\n\n{{< li zvoyghpz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Workshop Goals {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   This is a beginner-friendly workshop aimed at social scientists with little to no experience in R\n\n::: {.fragment .mt1}\n-   My goal this week is to \"[teach you how to drive]{.b .blue}\"\n:::\n\n::: {.fragment .mt1}\n-   Through [lectures]{.b .green} and [live coding]{.b .green}, you will learn the fundamentals of programming, data wrangling, visualization, and modeling in R\n:::\n\n::: {.fragment .mt1}\n-   Through hands-on [exercises]{.b .green}, you will gain confidence in your skills and ability to learn\n:::\n\n::: {.fragment .mt1}\n-   I will help you get your \"driver's license\" but you will need to practice to become a pro\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li avjivnej trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Workshop Roadmap {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n<table id=\"roadmap\" width=\"100%\">\n  <tr class=\"blue\">\n    <th>DAY 1A</th>\n    <th>DAY 2A</th>\n  </tr>\n  <tr>\n    <td>Intro/Overview</td>\n    <td>Factors/NAs</td>\n  </tr>\n  <tr>\n    <td>R Console/RStudio</td>\n    <td>Data Exploration</td>\n  </tr>\n  <tr>\n    <td>Objects/Functions</td>\n    <td>Correlations/Groups</td>\n  </tr>\n  <tr class=\"blue\">\n    <th style=\"padding-top:1.75rem;\">DAY 1B</th>\n    <th>DAY 2B</th>\n  </tr>\n  <tr>\n    <td>Vectors/Strings</td>\n    <td>Linear Modeling I</td>\n  </tr>\n  <tr>\n    <td>Packages/Tibbles</td>\n    <td>Linear Modeling II</td>\n  </tr>\n  <tr>\n    <td>Import/Export</td>\n    <td>Linear Modeling III</td>\n  </tr>\n</table>\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Workshop Etiquette {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n#### [Things to Do]{.green}\n\n-   Behave respectfully and with patience\n-   Ask for help in chat or \"raise hand\"\n-   Turn your camera on or off as desired\n-   Come and go from workshop as needed\n\n::: {.fragment .mt1}\n#### [Things Not to Do]{.red}\n\n-   Don't disparage yourself or others\n-   Don't stay confused for too long\n-   Don't unmute yourself when not talking\n-   Don't re-sell the workshop materials\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li syzdvjlt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n<!-- R and RStudio -->\n\n# R and RStudio\n\n## Programming is a Superpower\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- Programming is how we talk to and control our amazing computers\n\n- It gives us power and flexibility\n\n- Everything we do in this course will be accomplished via programming\n\n- Programming will leave a record of what we did (i.e., code), so we can later reuse, adapt, and share it\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li ifswbdwv trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n## Installing R {.smaller}\n\n::: {.columns .pv4}\n::: {.column .pr4 width=\"50%\"}\n#### Windows\n\n1.  Open a web browser\n2.  Visit [cloud.r-project.org](https://cloud.r-project.org)\n3.  Click \"Download R for Windows\"\n4.  Click the \"base\" subdirectory link\n5.  Click \"Download R-4.X.X\" (e.g., 4.3.0)\n6.  Run the downloaded .exe file\n7.  Select all the default options\n8.  Complete the installation wizard\n:::\n\n::: {.column width=\"50%\"}\n#### Mac OS\n\n1.  Open a web browser\n2.  Visit [cloud.r-project.org](https://cloud.r-project.org)\n3.  Click \"Download R for macOS\"\n4.  Click \"R-4.X.X.pkg\" (e.g., 4.2.2)\n5.  Run the downloaded .pkg file\n6.  Select all the default options\n7.  Complete the installation wizard\n:::\n:::\n\n::: aside\n*Note.* You will need to repeat this process every time a new version of R is released (every 4–5 months).\n:::\n\n\n## Installing RStudio {.smaller}\n\n::: {.columns .pv4}\n::: {.column .pr4 width=\"50%\"}\n#### Windows\n\n1.  Open a web browser\n2.  Visit [rstudio.com/download](https://www.rstudio.com/products/rstudio/download/){preview-link=\"false\"}\n3.  Scroll down until you find the table under the \"**All Installers**\" section\n4.  Find the row for \"Windows 10/11\"\n5.  Click \"RStudio-2022.XX.X-XXX.exe\"\n6.  Run the downloaded .exe file\n7.  Select all the default options\n8.  Complete the installation wizard\n:::\n\n::: {.column width=\"50%\"}\n#### Mac OS\n\n1.  Open a web browser\n2.  Visit [rstudio.com/download](https://www.rstudio.com/products/rstudio/download/){preview-link=\"false\"}\n3.  Scroll down until you find the table under the \"**All Installers**\" section\n4.  Find the row for \"macOS 10.15+\"\n5.  Click \"RStudio-2022.XX.X-XXX.dmg\"\n6.  Run the downloaded .dmg file\n7.  Drag the RStudio icon to your Applications folder (if you want)\n:::\n:::\n\n::: aside\n*Note.* You will need to repeat this process every time a new version of RStudio is released (every 2–4 months).\n:::\n\n\n## RStudio Window {.smaller}\n\n![](../../img/rstudio_labels.jpg)\n\n\n::: aside\n*Note.* You can customize RStudio (e.g., the fonts, color themes, and pane layout) under \"Tools \\> Global Options\".\n:::\n\n## R will Grant your Wishes {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   R is like a [well-meaning]{.b .green} but [overly literal]{.b .green} genie\n\n    -   It has the power to grant almost any wish\n    -   But we must phrase our wishes carefully!\n    -   *We will always get what we ask for...*\n    -   *...but not always what we wanted.*\n\n::: {.fragment .mt1}\n-   Mastering the [R language]{.b .blue} means learning...\n\n    -   How to properly phrase commands\n    -   How to decipher error messages\n    -   How to view code from R's perspective\n    -   How to detect and correct small mistakes\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li njhpxsof trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Communicating with R {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [Console]{.b .blue} is like a [chat window]{.b .green} with R\n    -   You send a command to R and get a response\n    -   Neither side of the conversation is saved\n\n::: {.fragment .mt1}\n-   An [R Script]{.b .blue} is like an [email thread]{.b .green} with R\n    -   You send many commands to R all at once\n    -   Only your side of the conversation is saved\n:::\n\n::: {.fragment .mt1}\n-   A [Quarto Document]{.b .blue} is like a [scrapbook]{.b .green} with R\n    -   You can combine code and formatted text\n    -   Both sides of the conversation are saved\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li zpxybbhl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Console Live Coding\n\n\n::: {.cell renv.ignore='true'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Addition\n\n10+3\n10 + 3 # spaces are optional but recommended\n\n\n# Subtraction\n\n10 - 3\n\n\n# Multiplication\n\n10 * 3 # correct\n10 x 3 # error\n\n\n# Division\n\n10 / 3 # correct\n10 \\ 3 # error\n\n\n# Exponentiation\n\n10 ^ 2\n\n\n# Order of Operations\n\n10 + 3 * 2\n(10 + 3) * 2\n\n\n# Negative Numbers\n\n10 + -30\n\n\n# Decimals and Fractions\n\n1.234\n(1 / 3)\n\n\n# Leading and Trailing Zeros\n\n09.870\n\n\n# Large Numbers\n\n9876543 # correct\n9,876,543 # error\n9 876 543 # error\n```\n:::\n\n\n\n## Scripts Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Creating a new script\n\n## Option 1: File > New File > R Script\n## Option 2: Top bar: white square with green plus icon\n## Option 3: Ctrl+Shift+N (Win) Cmd+Shift+N (Mac)\n## A new pane will be added to the RStudio window called the Source Editor\n\n\n# Entering commands into script\n\n## In the Source Editor, we can add many lines of code to a script\n## This allows for longer and more complex operations\n## Think of it like drafting an email with many instructions\n(1.4 + 2.8 + 9.3) / 3\n30.1 - 24.7\n\n\n# Running one line of code\n\n## Hitting Enter (Win) or Return (Mac) does not run the code\n## We can run one line of code at a time to see its results in console\n## Option 1: With cursor on a line, click the Run button (top-right)\n## Option 2: With cursor on a line, Ctrl+Enter (Win) or Cmd+Return (Mac)\n\n\n# Running many lines of code\n\n## We can run multiple lines of code at once to see results in console\n## Option 1: Highlight lines with mouse, click the Run button (top-right)\n## Option 2: Highlight lines with mouse, Ctrl+Enter (Win) or Cmd+Return (Mac)\n## We can even run all lines of code in a script at once\n## Option 1: Click the Source button (top-right)\n## Option 2: Ctrl+Shift+Enter (Win) or Cmd+Shift+Return (Mac)\n\n\n# Adding comments to scripts\n\n## To help communicate the purpose of our code, we can add comments\n## Comments will be ignored by R and are only there for human readers\n## We always start a comment in an R script with a hash symbol: #\n## I have been using comments in this very section you are reading!\n\n# Calculate the average score on the quiz\n(1.4 + 2.8 + 9.3) / 3\n\n# Calculate the difference between exam 1 and exam 2\n30.1 - 24.7\n\n100 / 9 # we can even have comments at the end of line (start will still run)\n\n\n# Saving the script file\n\n## Option 1: File > Save\n## Option 2: Source bar: blue and white disk icon\n## Option 3: Ctrl+S (Win) Cmd+S (Mac)\n## For now, save it wherever; we'll learn about Projects in [02b]\n## You will now have a .R file that you can keep and/or transfer\n## Only the code/input is saved in the script, not the results/output\n```\n:::\n\n\n## Projects {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Projects]{.b .blue} are [special folders]{.b .green} on your computer\n    -   They contain all files related to a task\n    -   They keep everything together and organized\n\n::: {.fragment .mt1}\n-   Projects make it easy to [find and use your files]{.b .green}\n    -   No need to specify long, annoying file paths\n    -   No need to worry about working directories\n:::\n\n::: {.fragment .mt1}\n-   Projects make it easy to [switch between tasks]{.b .green}\n    -   They will remember exactly where you left off\n    -   You can even open multiple projects at once\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li jzzxeaju trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: {.aside}\n*Note.* Save your project in a cloud service folder (e.g., Box, Dropbox, Google Drive, OneDrive) to backup and sync it.\n:::\n\n\n## Projects Live Coding\n\n::: {.instructions}\n    # Create a new Project\n    - Open the \"File\" menu in RStudio\n    - Select the \"New Project...\" option\n    - Select the \"New Directory\" option\n    - Select the \"New Project\" option\n    - Name the directory \"Intro R\" or \"R4SS\" (or whatever)\n    - Browse to where to create your Project folder\n\n    # Create a new File\n    - Explore the Files tab in the Extras pane\n    - Create a New File (e.g., a script) as an example\n    - RStudio will automatically create it in your project folder\n    - Add some text to the example file (e.g., \"# Hello World\")\n    - Save the file and note that it defaults to your project folder\n    - Close the script with the \"x\" icon\n    - Reopen the script from the Files tab\n\n    # Close and Open Project\n    - Open the \"File\" menu in RStudio\n    - Select the \"Close Project\" option\n    - Notice that your work is now gone\n    - Open the \"File\" menu in RStudio\n    - Select the \"Open Project\" option\n    - Browse to your project folder\n    - Open the .Rproj file (e.g., R4SS.Rproj)\n    - Notice that your work is now back!\n:::\n\n## Assignment {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   It is often useful to store data in [named objects]{.b .green}\n    -   This makes the data easier to use and re-use\n    -   This makes the code easier to write and read\n\n::: {.fragment .mt1}\n-   Which command is easier to follow?\n    1.  Dial *7 8 5 8 6 4 0 8 4 1*\n    2.  Call *Office Phone*\n:::\n\n::: {.fragment .mt1}\n-   Named objects are created using [assignment]{.b .blue}\n    -   Give a **name** then an **arrow** then the **data**\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li mgtgkkcb trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`office <- 7858640841`\n:::\n:::\n:::\n\n## Assignment Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: Assigning and printing\n\nx <- 2\nx\n\n# ==============================================================================\n\n# USECASE: Using an object in math (a la algebra) \n\nx * 4\n\n2 * 4\n\n# ==============================================================================\n\n# LESSON: You must use assignment to update an object\n\nx\n\nx + 1\n\nx # still 2\n\nx <- x + 1\nx # updated to 3\n\n# ==============================================================================\n\n# USECASE: We can use the same object multiple times in a line\n\n(10 + x - 1) / x\n\n# ==============================================================================\n\n# USECASE: We can also use an object to create another object\n\ny <- 10 + x\ny\n\n# ==============================================================================\n\n# USECASE: We can also use multiple objects in a line\n\ny / x\n```\n:::\n\n\n## Naming {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Object names can [only include]{.b .blue}:\n    -   Letters: `a-Z`\n    -   Numbers: `0-9`\n    -   Underscores: `_`\n    -   Periods: `.`\n\n::: {.fragment .mt1}\n-   Additional Rules:\n    -   Must [start with a letter or period]{.b .blue}\n    -   Cannot contain spaces or dashes\n    -   Cannot contain other symbols\n    -   Names are case-sensitive (`age` ≠ `Age`)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li efdggetp trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Naming Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: Good names are a balancing act\n\nx <- 93 # what is it?\n\nrate <- 93 # too short\n\nheart_rate_in_beats_per_minute <- 93 # too long\n\nheart_rate_bpm <- 93 # just right\n\n# ==============================================================================\n\n# PITFALL: Don't try to include spaces or dashes in names\n\nheart rate <- 93 # error\n\nheart-rate <- 93 # error\n\n# ==============================================================================\n\n# PITFALL: Don't try to include special symbols\n\nage@time2 <- 12 # error\n\nage_time2 <- 12 # correct\n\n# ==============================================================================\n\n# PITFALL: Don't try to put a number or underscore first\n\nheart_rate_1 <- 93 # correct\n\n1_heart_rate <- 93 # error\n\n_heart_rate <- 93 # error\n\n# ==============================================================================\n\n# LESSON: Object names are case-sensitive\n\nheart_rate <- 93\n\nHeart_rate <- 88\n\nheart_rate # still 93\n\nHeart_rate # a new object\n```\n:::\n\n\n\n## Functions {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Recipes]{.b .green} allow chefs to cook up tasty treats\n    -   Recipes call for ingredients\n    -   Recipes involve one or more steps\n    -   Steps transform ingredients into treats\n\n::: {.fragment .mt1}\n-   [Functions]{.b .blue} are like *customizable* recipes\n    -   Functions call for inputs (\"arguments\")\n    -   Functions involve one or more lines of code\n    -   Code transforms inputs into outputs\n    -   Using functions requires parentheses (usually)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li vpqdjfdy trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`out <- f(in1, in2)`\n:::\n:::\n:::\n\n## Functions Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Function can perform a task more easily and readably\n\n# TEMPLATE: output <- function_name(input)\n\n9 ^ (1 / 2)\n\nx <- sqrt(9)\nx\n\n# ==============================================================================\n\n# LESSON: We can also use functions to transform objects\n\ny <- 9\n\nsqrt(y)\n\n# ==============================================================================\n\n# LESSON: We can even use functions to transform the result of calculations\n\n2 / 3\n\nround(2 / 3)\n\n# ==============================================================================\n\n# LESSON: We can customize what a function does using arguments\n\n# TEMPLATE: output <- function_name(argument, argument_name = argument_value)\n\nround(2 / 3, digits = 2)\n\nround(2 / 3, digits = 3)\n\n# ==============================================================================\n\n# LESSON: Some arguments are optional because they have default values\n\nround(2 / 3) # the default value for digits is 0\n\nround(2 / 3, digits = 0)\n\n# ==============================================================================\n\n# LESSON: Functions can be \"nested\" and are evaluated inside-out\n\nsqrt(5)\n\nround(sqrt(5)) # Square root 5 then round the result\n\nsqrt(round(5)) # Round 5 then square root the result\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}