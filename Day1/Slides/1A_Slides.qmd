---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    controls: true
    pagetitle: "Intro R4SS Day 1A"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-06-01"
---

::: {.my-title}
# [Introduction to R]{.blue2} <br />for Social Scientists

::: {.my-grey}
[Workshop Day 1A | 2023-06-01]{}<br />
[Jeffrey M. Girard | Pitt Methods]{}
:::

![](../../img/proud_coder_2780E3.svg){.absolute bottom=0 right=0 width=400}
:::

<!-- Overview -->

# Overview

## Instructor {.smaller}

::: {.columns .pv4}
::: {.column width="30%"}
::: {.tc}
![](../../img/Girard_500x500.jpg){.br-100}

**Jeffrey Girard**, PhD<br /> [affcom.ku.edu/girard](https://affcom.ku.edu/girard)<br /> [jmgirard\@ku.edu](mailto:jmgirard@ku.edu)
:::
:::

::: {.column width="10%"}
:::

::: {.column width="60%"}
::: {.fragment}
#### Background

-   [Assistant Professor]{.b .green}, *University of Kansas*
-   Research Postdoc, *Carnegie Mellon University*
-   PhD Student, *University of Pittsburgh*
:::
::: {.fragment .mt1}
#### Research Areas

-   Psychological Assessment
-   Affective/Interpersonal Communication
-   Applied [Statistics]{.b .green} and Machine Learning
-   [Data Science]{.b .green} and Software Engineering
:::
:::
:::

## R Rationale {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
1.  Think of your [computer]{.b .blue} as the [engine]{.b .green} of a car
    -   It provides raw power for computation

::: {.fragment .mt1}
2.  The [R language]{.b .blue} is like the [controls]{.b .green} for the car
    -   It lets you apply and direct that power
:::

::: {.fragment .mt1}
3.  [RStudio]{.b .blue} is like a fancy [dashboard]{.b .green} for the car
    -   It adds extra information and convenience
:::

::: {.fragment .mt1}
4.  An [R package]{.b .blue} is like an [add-on]{.b .green} for the car
    -   It adds new features and capabilities
:::
:::

::: {.column .tc .pv5 .relative width="40%"}
{{< li zvoyghpz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Workshop Goals {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   This is a beginner-friendly workshop aimed at social scientists with little to no experience in R

::: {.fragment .mt1}
-   My goal this week is to "[teach you how to drive]{.b .blue}"
:::

::: {.fragment .mt1}
-   Through [lectures]{.b .green} and [live coding]{.b .green}, you will learn the fundamentals of programming, data wrangling, visualization, and modeling in R
:::

::: {.fragment .mt1}
-   Through hands-on [exercises]{.b .green}, you will gain confidence in your skills and ability to learn
:::

::: {.fragment .mt1}
-   I will help you get your "driver's license" but you will need to practice to become a pro
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li avjivnej trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Workshop Roadmap {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
<table id="roadmap" width="100%">
  <tr class="blue">
    <th>DAY 1A</th>
    <th>DAY 2A</th>
  </tr>
  <tr>
    <td>Intro/Overview</td>
    <td>Factors/NAs</td>
  </tr>
  <tr>
    <td>R Console/RStudio</td>
    <td>Data Exploration</td>
  </tr>
  <tr>
    <td>Objects/Functions</td>
    <td>Correlations/Groups</td>
  </tr>
  <tr class="blue">
    <th style="padding-top:1.75rem;">DAY 1B</th>
    <th>DAY 2B</th>
  </tr>
  <tr>
    <td>Vectors/Strings</td>
    <td>Linear Modeling I</td>
  </tr>
  <tr>
    <td>Packages/Tibbles</td>
    <td>Linear Modeling II</td>
  </tr>
  <tr>
    <td>Import/Export</td>
    <td>Linear Modeling III</td>
  </tr>
</table>
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Workshop Etiquette {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
#### [Things to Do]{.green}

-   Behave respectfully and with patience
-   Ask for help in chat or "raise hand"
-   Turn your camera on or off as desired
-   Come and go from workshop as needed

::: {.fragment .mt1}
#### [Things Not to Do]{.red}

-   Don't disparage yourself or others
-   Don't stay confused for too long
-   Don't unmute yourself when not talking
-   Don't re-sell the workshop materials
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li syzdvjlt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

<!-- R and RStudio -->

# R and RStudio

## Programming is a Superpower

::: {.columns .pv4}

::: {.column width="60%"}
- Programming is how we talk to and control our amazing computers

- It gives us power and flexibility

- Everything we do in this course will be accomplished via programming

- Programming will leave a record of what we did (i.e., code), so we can later reuse, adapt, and share it
:::

::: {.column .tc .pv4 width="40%"}
{{< li ifswbdwv trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::


## Common Data Science Languages {.smaller}

#### General Purpose

- [R]{.b .blue} (interactive, welcoming)
    - *Strengths:* statistics, data wrangling, data visualization
    - *Weaknesses:* relatively slow, not security-focused

::: {.fragment}
- [Python]{.b .blue} (popular, versatile)
    - *Strengths:* automation, machine learning, data wrangling
    - *Weaknesses:* relatively slow
:::  
  
::: {.fragment}
- [Java]{.b .green} / [C++]{.b .green} / [Scala]{.b .green} / [Julia]{.b .green} (faster but older and harder or newer and smaller)
:::

::: {.fragment}
#### Special Purpose

- JavaScript (web), SQL (databases), Swift (mobile), MATLAB (neuroscience), etc.
:::


## The R Ecosystem {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
1.  Think of your [computer]{.b .blue} as the [engine]{.b .green} of a car
    -   It provides raw power for computation

::: {.fragment .mt1}
2.  The [R language]{.b .blue} is like the [controls]{.b .green} for the car
    -   It lets you apply and direct that power
:::

::: {.fragment .mt1}
3.  [RStudio]{.b .blue} is like a fancy [dashboard]{.b .green} for the car
    -   It adds extra information and convenience
:::

::: {.fragment .mt1}
4.  An [R package]{.b .blue} is like an [add-on]{.b .green} for the car
    -   It adds new features and capabilities
:::
:::

::: {.column .tc .pv5 .relative width="40%"}
{{< li zvoyghpz trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Installing R {.smaller}

::: {.columns .pv4}
::: {.column .pr4 width="50%"}
#### Windows

1.  Open a web browser
2.  Visit [cloud.r-project.org](https://cloud.r-project.org)
3.  Click "Download R for Windows"
4.  Click the "base" subdirectory link
5.  Click "Download R-4.X.X" (e.g., 4.2.2)
6.  Run the downloaded .exe file
7.  Select all the default options
8.  Complete the installation wizard
:::

::: {.column width="50%"}
#### Mac OS

1.  Open a web browser
2.  Visit [cloud.r-project.org](https://cloud.r-project.org)
3.  Click "Download R for macOS"
4.  Click "R-4.X.X.pkg" (e.g., 4.2.2)
5.  Run the downloaded .pkg file
6.  Select all the default options
7.  Complete the installation wizard
:::
:::

::: aside
*Note.* You will need to repeat this process every time a new version of R is released (every 4–5 months).
:::


## Installing RStudio {.smaller}

::: {.columns .pv4}
::: {.column .pr4 width="50%"}
#### Windows

1.  Open a web browser
2.  Visit [rstudio.com/download](https://www.rstudio.com/products/rstudio/download/){preview-link="false"}
3.  Scroll down until you find the table under the "**All Installers**" section
4.  Find the row for "Windows 10/11"
5.  Click "RStudio-2022.XX.X-XXX.exe"
6.  Run the downloaded .exe file
7.  Select all the default options
8.  Complete the installation wizard
:::

::: {.column width="50%"}
#### Mac OS

1.  Open a web browser
2.  Visit [rstudio.com/download](https://www.rstudio.com/products/rstudio/download/){preview-link="false"}
3.  Scroll down until you find the table under the "**All Installers**" section
4.  Find the row for "macOS 10.15+"
5.  Click "RStudio-2022.XX.X-XXX.dmg"
6.  Run the downloaded .dmg file
7.  Drag the RStudio icon to your Applications folder (if you want)
:::
:::

::: aside
*Note.* You will need to repeat this process every time a new version of RStudio is released (every 2–4 months).
:::


## RStudio Window {.smaller}

![](../../img/rstudio_labels.jpg)


::: aside
*Note.* You can customize RStudio (e.g., the fonts, color themes, and pane layout) under "Tools \> Global Options".
:::


<!-- Console and Math -->

# Console and Math

## R will Grant your Wishes {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   R is like a [well-meaning]{.b .green} but [overly literal]{.b .green} genie

    -   It has the power to grant almost any wish
    -   But we must phrase our wishes carefully!
    -   *We will always get what we ask for...*
    -   *...but not always what we wanted.*

::: {.fragment .mt1}
-   Mastering the [R language]{.b .blue} means learning...

    -   How to properly phrase commands
    -   How to decipher error messages
    -   How to view code from R's perspective
    -   How to detect and correct small mistakes
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li njhpxsof trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Communicating with R {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   The [Console]{.b .blue} is like a [chat window]{.b .green} with R
    -   You send a command to R and get a response
    -   Neither side of the conversation is saved

::: {.fragment .mt1}
-   An [R Script]{.b .blue} is like an [email thread]{.b .green} with R
    -   You send many commands to R all at once
    -   Only your side of the conversation is saved
:::

::: {.fragment .mt1}
-   A [Quarto Document]{.b .blue} is like a [scrapbook]{.b .green} with R
    -   You can combine code and formatted text
    -   Both sides of the conversation are saved
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li zpxybbhl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Console Live Coding

```{r, renv.ignore=TRUE}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Addition

10+3
10 + 3 # spaces are optional but recommended


# Subtraction

10 - 3


# Multiplication

10 * 3 # correct
10 x 3 # error


# Division

10 / 3 # correct
10 \ 3 # error


# Exponentiation

10 ^ 2


# Order of Operations

10 + 3 * 2
(10 + 3) * 2


# Negative Numbers

10 + -30


# Decimals and Fractions

1.234
(1 / 3)


# Leading and Trailing Zeros

09.870


# Large Numbers

9876543 # correct
9,876,543 # error
9 876 543 # error
```

## Scripts Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Creating a new script

## Option 1: File > New File > R Script
## Option 2: Top bar: white square with green plus icon
## Option 3: Ctrl+Shift+N (Win) Cmd+Shift+N (Mac)
## A new pane will be added to the RStudio window called the Source Editor


# Entering commands into script

## In the Source Editor, we can add many lines of code to a script
## This allows for longer and more complex operations
## Think of it like drafting an email with many instructions
(1.4 + 2.8 + 9.3) / 3
30.1 - 24.7


# Running one line of code

## Hitting Enter (Win) or Return (Mac) does not run the code
## We can run one line of code at a time to see its results in console
## Option 1: With cursor on a line, click the Run button (top-right)
## Option 2: With cursor on a line, Ctrl+Enter (Win) or Cmd+Return (Mac)


# Running many lines of code

## We can run multiple lines of code at once to see results in console
## Option 1: Highlight lines with mouse, click the Run button (top-right)
## Option 2: Highlight lines with mouse, Ctrl+Enter (Win) or Cmd+Return (Mac)
## We can even run all lines of code in a script at once
## Option 1: Click the Source button (top-right)
## Option 2: Ctrl+Shift+Enter (Win) or Cmd+Shift+Return (Mac)


# Adding comments to scripts

## To help communicate the purpose of our code, we can add comments
## Comments will be ignored by R and are only there for human readers
## We always start a comment in an R script with a hash symbol: #
## I have been using comments in this very section you are reading!

# Calculate the average score on the quiz
(1.4 + 2.8 + 9.3) / 3

# Calculate the difference between exam 1 and exam 2
30.1 - 24.7

100 / 9 # we can even have comments at the end of line (start will still run)


# Saving the script file

## Option 1: File > Save
## Option 2: Source bar: blue and white disk icon
## Option 3: Ctrl+S (Win) Cmd+S (Mac)
## For now, save it wherever; we'll learn about Projects in [02b]
## You will now have a .R file that you can keep and/or transfer
## Only the code/input is saved in the script, not the results/output
```

# Assignment

## Assignment {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   It is often useful to store data in [named objects]{.b .green}
    -   This makes the data easier to use and re-use
    -   This makes the code easier to write and read

::: {.fragment .mt1}
-   Which command is easier to follow?
    1.  Dial *7 8 5 8 6 4 0 8 4 1*
    2.  Call *Office Phone*
:::

::: {.fragment .mt1}
-   Named objects are created using [assignment]{.b .blue}
    -   Give a **name** then an **arrow** then the **data**
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li mgtgkkcb trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`office <- 7858640841`
:::
:::
:::

## Assignment Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: Assigning and printing

x <- 2
x

# ==============================================================================

# USECASE: Using an object in math (a la algebra) 

x * 4

2 * 4

# ==============================================================================

# LESSON: You must use assignment to update an object

x

x + 1

x # still 2

x <- x + 1
x # updated to 3

# ==============================================================================

# USECASE: We can use the same object multiple times in a line

(10 + x - 1) / x

# ==============================================================================

# USECASE: We can also use an object to create another object

y <- 10 + x
y

# ==============================================================================

# USECASE: We can also use multiple objects in a line

y / x
```

# Naming

## Naming {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Object names can [only include]{.b .blue}:
    -   Letters: `a-Z`
    -   Numbers: `0-9`
    -   Underscores: `_`
    -   Periods: `.`

::: {.fragment .mt1}
-   Additional Rules:
    -   Must [start with a letter or period]{.b .blue}
    -   Cannot contain spaces or dashes
    -   Cannot contain other symbols
    -   Names are case-sensitive (`age` ≠ `Age`)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li efdggetp trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Naming Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: Good names are a balancing act

x <- 93 # what is it?

rate <- 93 # too short

heart_rate_in_beats_per_minute <- 93 # too long

heart_rate_bpm <- 93 # just right

# ==============================================================================

# PITFALL: Don't try to include spaces or dashes in names

heart rate <- 93 # error

heart-rate <- 93 # error

# ==============================================================================

# PITFALL: Don't try to include special symbols

age@time2 <- 12 # error

age_time2 <- 12 # correct

# ==============================================================================

# PITFALL: Don't try to put a number or underscore first

heart_rate_1 <- 93 # correct

1_heart_rate <- 93 # error

_heart_rate <- 93 # error

# ==============================================================================

# LESSON: Object names are case-sensitive

heart_rate <- 93

Heart_rate <- 88

heart_rate # still 93

Heart_rate # a new object
```

# Functions

## Functions {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Recipes]{.b .green} allow chefs to cook up tasty treats
    -   Recipes call for ingredients
    -   Recipes involve one or more steps
    -   Steps transform ingredients into treats

::: {.fragment .mt1}
-   [Functions]{.b .blue} are like *customizable* recipes
    -   Functions call for inputs ("arguments")
    -   Functions involve one or more lines of code
    -   Code transforms inputs into outputs
    -   Using functions requires parentheses (usually)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li vpqdjfdy trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`out <- f(in1, in2)`
:::
:::
:::

## Functions Live Coding

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

# USECASE: Function can perform a task more easily and readably

# TEMPLATE: output <- function_name(input)

9 ^ (1 / 2)

x <- sqrt(9)
x

# ==============================================================================

# LESSON: We can also use functions to transform objects

y <- 9

sqrt(y)

# ==============================================================================

# LESSON: We can even use functions to transform the result of calculations

2 / 3

round(2 / 3)

# ==============================================================================

# LESSON: We can customize what a function does using arguments

# TEMPLATE: output <- function_name(argument, argument_name = argument_value)

round(2 / 3, digits = 2)

round(2 / 3, digits = 3)

# ==============================================================================

# LESSON: Some arguments are optional because they have default values

round(2 / 3) # the default value for digits is 0

round(2 / 3, digits = 0)
```
